name: Release & Publish

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 2.1.0, 2.1.0-beta.1)'
        required: true
        type: string
      tag:
        description: 'NPM tag (latest, beta, alpha)'
        required: false
        default: 'latest'
        type: choice
        options:
          - latest
          - beta
          - alpha

jobs:
  # 检查和验证
  validate:
    name: Validate & Test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.package-version.outputs.version }}
      is-prerelease: ${{ steps.check-prerelease.outputs.result }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false
          
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
        
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Type check
        run: pnpm type-check
        
      - name: Lint check
        run: pnpm lint
        
      - name: Build package
        run: pnpm build
        
      - name: Get package version
        id: package-version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
        
      - name: Check if prerelease
        id: check-prerelease
        run: |
          VERSION="${{ steps.package-version.outputs.version }}"
          if [[ "$VERSION" =~ -[a-zA-Z] ]]; then
            echo "result=true" >> $GITHUB_OUTPUT
          else
            echo "result=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Verify V2 exports
        run: |
          node -e "
          const pkg = require('./dist/index.js');
          const v1Exports = Object.keys(pkg).filter(key => 
            key === 'PaymentManager' || 
            key === 'createPaymentManager' || 
            key === 'handleWechatNotify' ||
            key === 'handleAlipayNotify'
          );
          if (v1Exports.length > 0) {
            console.error('❌ Found V1 exports:', v1Exports);
            process.exit(1);
          }
          console.log('✅ V2 exports verified');
          "

  # 发布到npm
  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: validate
    environment: npm-publish
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
          run_install: false
          
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
        
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build package
        run: pnpm build
        
      - name: Determine npm tag
        id: npm-tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          elif [ "${{ needs.validate.outputs.is-prerelease }}" = "true" ]; then
            VERSION="${{ needs.validate.outputs.version }}"
            if [[ "$VERSION" =~ -beta ]]; then
              echo "tag=beta" >> $GITHUB_OUTPUT
            elif [[ "$VERSION" =~ -alpha ]]; then
              echo "tag=alpha" >> $GITHUB_OUTPUT
            elif [[ "$VERSION" =~ -rc ]]; then
              echo "tag=rc" >> $GITHUB_OUTPUT
            else
              echo "tag=next" >> $GITHUB_OUTPUT
            fi
          else
            echo "tag=latest" >> $GITHUB_OUTPUT
          fi
          
      - name: Update package version (if workflow_dispatch)
        if: github.event_name == 'workflow_dispatch'
        run: |
          npm version ${{ github.event.inputs.version }} --no-git-tag-version
          
      - name: Publish to npm
        run: pnpm publish --tag ${{ steps.npm-tag.outputs.tag }} --access public --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Create GitHub release (if workflow_dispatch)
        if: github.event_name == 'workflow_dispatch'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.event.inputs.version }}
          release_name: PayStream V2 v${{ github.event.inputs.version }}
          body: |
            ## PayStream V2 v${{ github.event.inputs.version }}
            
            ### 🚀 发布信息
            - **版本**: ${{ github.event.inputs.version }}
            - **NPM标签**: ${{ github.event.inputs.tag }}
            - **发布时间**: ${{ github.event.head_commit.timestamp }}
            
            ### 📦 安装方式
            ```bash
            npm install paystream@${{ github.event.inputs.tag }}
            # 或
            pnpm add paystream@${{ github.event.inputs.tag }}
            ```
            
            ### 🔗 相关链接
            - [NPM Package](https://www.npmjs.com/package/paystream)
            - [文档](https://github.com/${{ github.repository }}/blob/main/README.md)
            - [更新日志](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md)
          draft: false
          prerelease: ${{ needs.validate.outputs.is-prerelease == 'true' }}

  # 更新文档和Badge
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [validate, publish]
    if: needs.validate.outputs.is-prerelease == 'false'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Update README badges
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          sed -i "s/badge\/version-.*-blue/badge\/version-${VERSION}-blue/g" README.md
          
      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git diff --staged --quiet || git commit -m "docs: update version badge to v${{ needs.validate.outputs.version }}"
          git push 